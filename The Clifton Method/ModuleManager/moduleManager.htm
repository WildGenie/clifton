<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Module Manager - Dynamically Loa</title>
</head>

<body>

<p>Module Manager - Dynamically Loading Assemblies at Runtime</p>
<p>A Clifton Method Core Component</p>
<h2>Introduction</h2>
<p>Building applications with runtime loaded assemblies is a useful capability, 
as it provides the ability to:</p>
<ol>
	<li>Customize an application from &quot;logical components.&quot;</li>
	<li>Replace components with new or different behavior, for example, mock 
	objects.</li>
	<li>Extend an application's behavior by adding new components.</li>
</ol>
<p>By &quot;logical components&quot;, I mean an assembly (DLL) that is encapsulates all 
the functionality of &quot;something&quot; into a group.&nbsp; An easy way to first 
understand this concept is by thinking about physical devices, for example, a 
camera.&nbsp; All the functionality that a camera might provide, such as taking 
a picture, streaming video, configuring its resolution, and other settings, can 
be organized into a logical component.&nbsp; Because different cameras will most 
likely have different API's and options, one can create different DLL's for each 
physical device and customize the application for the actual camera (or cameras) 
that are part of a particular installation.</p>
<p>Creating services as logical components is another useful thing to do.&nbsp; 
For example, a web server can be a component, encapsulating handling HTTP 
requests.&nbsp; The router might be a different component.&nbsp; If you're 
implementing a server that provides public services, you probably don't need a 
router that performs authentication.&nbsp; If you're implementing a server that 
serves non-public pages or REST calls, you would want a router component that 
performs authentication.&nbsp; Another good example is interfacing to different 
databases, such as SQL Server, Oracle, or a NoSQL database.</p>
<p>When is a set of classes suitable for wrapping in a module as a component, 
and when are they not?&nbsp; Ideally, you should already be asking yourself this 
question when writing a non-modular application because even the internals of 
such an application should be organized in such a way that the code is 
structured &quot;logically.&quot;</p>
<h3>What is Suitable For Modularization?</h3>
<p>Ask these questions:</p>
<h4>Does It Behave Like a Component?</h4>
<ol>
	<li>Is the set of classes intended to be re-usable?</li>
	<li>Would it be useful to mock the functionality provided by these classes?</li>
	<li>Am I coding against a specific physical (hardware) object or against a 
	specific behavior?</li>
	<li>Can I foresee the physical hardware changing or the behavior changing 
	depending on application/customer-specific needs?</li>
	<li>Are the classes implementing high level behaviors?</li>
	<li>Are the classes implementing business rules that might vary depending on 
	application-specific needs?</li>
</ol>
<p>In the last question, what do we mean by &quot;high level behaviors?&quot;&nbsp; </p>
<h4>Is It High Level?</h4>
<p>High level behavior typically:</p>
<ol>
	<li>Interfaces with other high level components in the system.</li>
	<li>Communicates to other applications (such as a database).</li>
	<li>Handles asynchronous events, such as HTTP, TCP/IP, serial, USB, or other 
	transports.</li>
	<li>Interfaces with physical hardware.</li>
	<li>Is implemented as a prototype (is instantiated) but acts as a singleton 
	for the specific functionality that it provides.</li>
	<li>Implements a common interface for all logical components of the same 
	&quot;kind&quot; (hence #5, instantiated.)&nbsp; </li>
	<li>#6 means that the behavior is abstracted through an interface.</li>
</ol>
<h4>Is it Low Level?</h4>
<p>Low level behaviors typically fall into the &quot;utility&quot; category, classes that 
implement:</p>
<ol>
	<li>Extension methods</li>
	<li>Conversion methods</li>
	<li>Can be, and often is, implemented as static methods</li>
	<li>Does not typically implement interfaces to abstract the behavior</li>
</ol>
<p>You essentially have all &quot;yes&quot; answers for &quot;Does it behave like a component?&quot; 
and &quot;Is it high level?&quot;, and all &quot;no&quot; answers for &quot;Is it low level?&quot;</p>
<h3>Modular Component vs. Inheritable</h3>
<p>The typical approach to building &quot;components&quot; is to use inheritance and a 
factory pattern.&nbsp; </p>
<h4>A Typical Inheritance Architecture</h4>
<p><img border="0" src="factory%20pattern.png" width="488" height="313"></p>
<p>Here, the code, in a monolithic manner, implements the each of the concrete 
server implementations and asks the factory method to create the desired 
concrete object.</p>
<h4>A Typical Modular Component Architecture</h4>
<p><img border="0" src="module%20pattern.png" width="544" height="266"></p>
<p>In this scenario, the application gets an instance of whatever is specified in a separate 
configuration file as to the implementing concrete type.&nbsp; The concrete 
types are implemented as separate assemblies.</p>
<p>What do you notice about this?</p>
<ol>
	<li>The module loader is similar to a factory pattern, but you don't ask it 
	to get you anything, instead the application, through a configuration file, 
	determines what is loaded.&nbsp; The &quot;get me something&quot; factory pattern is 
	replaced a &quot;you get this&quot;, more like a strategy pattern.</li>
	<li>The concrete classes that are implemented in the module typically don't 
	inherit from a base class but rather implement an interface.</li>
	<li>Inheritance is replaced with modularity.</li>
</ol>
<p>That last point is worth repeating: <i>Inheritance is replaced with 
modularity. </i>Instead of creating a potentially complex inheritance tree of 
specializations, each specialization lives autonomously in its own module, and 
the inheritance is usually very shallow, in fact usually just implementing the 
interface requirements.</p>
<h3>The Annoying Thing About Modular Architectures</h3>
<p>In order to utilize a modular architecture, the interface classes must be 
shared, either by referencing the same files, typically in some common folder, 
or wrapping the shared files in an assembly shared both by your application and 
the module.&nbsp; The salient point is that the files, or assembly of the files, 
must be shared.&nbsp; Why?&nbsp; Because:</p>
<ol>
	<li>The application needs to know how to talk to the module, which is 
	through the interface</li>
	<li>The module needs to know what it implements, again through the 
	interface.</li>
</ol>
<p>A monolithic application doesn't have this issue because everything is in the 
same application solution:</p>
<p><img border="0" src="monolithic%20app.png" width="439" height="140"></p>
<p>Once you start writing your code so that you have different projects (assemblies) 
for your components, you must share the interface source code or abstract class 
code in a shared assembly:</p>
<p>
<img border="0" src="compile-time%20modular%20application.png" width="439" height="280"></p>
<p>This is also true when you start writing components as runtime loaded 
modules:</p>
<p><img border="0" src="runtime%20modular%20app.png" width="439" height="372"></p>
<p>Here again we see an inversion of more monolithic application development.&nbsp; 
Rather than:</p>
<ul>
	<li>everything living in one project (highly monolithic)</li>
</ul>
<p>or:</p>
<ul>
	<li>many projects with each project referencing other projects that it needs 
	to know about (compile-time modularity)</li>
</ul>
<p>we instead have:</p>
<ul>
	<li>an application that shares an interface specification and separate 
	modules (assemblies) which are not referenced by the application nor which 
	reference each other, except through the shared interface.</li>
</ul>
<p>Certainly, the project files for the different modules may live together in 
the same solution (and even in multiple solutions, as these modules are often 
shared), but the salient point is, <i>neither the application, nor the modules, 
directly reference other modules.</i></p>
<h2>Implementation</h2>
<p>After that lengthy introduction, we can look at the implementation details.&nbsp; 
</p>
<h3>Side Note</h3>
<p>One thing to note is that in this code, I was dabbling, somewhat inconsistently, 
with semantic types, as I wrote about in
<a href="http://www.codeproject.com/Articles/1031504/Strong-Type-Checking-with-Semantic-Types">
Strong Type Checking with Semantic Typess</a>.&nbsp; So you'll see a couple types 
like <code>XmlFileName</code> and <code>AssemblyFileName</code> that are type 
wrappers for strings.&nbsp; I'm not sure whether there's benefit to this or not 
-- it's probably unnecessary complexity here, though I do like the idea of 
specifying what type of string is expected in the parameter, based on type 
rather than variable name.</p>
<p>I also rely on some Linq extension methods and assertion methods that are in 
the repo, but are not discussed here.</p>
<h3>Specifying Modules</h3>
<p>I specify modules in an XML file.&nbsp; You could just as easily put this in 
the application config file, a database table, a JSON document, or something 
else.&nbsp; The XML format that I use looks like this:</p>
<pre>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;Modules&gt;
  &lt;Module AssemblyName='[some module name].dll'/&gt;
  &lt;Module AssemblyName='[another module name].dll'/&gt;
&lt;/Modules&gt;</pre>
<p>I load the XML file into the List&lt;AssemblyFileName&gt; that the module 
registration requires (see below) with two helper methods in your application:</p>
<pre>/// &lt;summary&gt;
/// Return the list of assembly names specified in the XML file so that
/// we know what assemblies are considered modules as part of the application.
/// &lt;/summary&gt;
static private List&lt;AssemblyFileName&gt; GetModuleList(XmlFileName filename)
{
  Assert.That(File.Exists(filename.Value), &quot;Module definition file &quot; + filename.Value + &quot; does not exist.&quot;);
  XDocument xdoc = XDocument.Load(filename.Value);

  return GetModuleList(xdoc);
}

/// &lt;summary&gt;
/// Returns the list of modules specified in the XML document so we know what
/// modules to instantiate.
/// &lt;/summary&gt;
static private List&lt;AssemblyFileName&gt; GetModuleList(XDocument xdoc)
{
  List&lt;AssemblyFileName&gt; assemblies = new List&lt;AssemblyFileName&gt;();
  (from module in xdoc.Element(&quot;Modules&quot;).Elements(&quot;Module&quot;)
    select module.Attribute(&quot;AssemblyName&quot;).Value).ForEach(s =&gt; assemblies.Add(AssemblyFileName.Create(s)));

  return assemblies;
}</pre>
<h3>Module Registration</h3>
<p>Using the above code (for an XML file), I register modules with:</p>
<pre>IModuleManager moduleMgr = serviceManager.Get&lt;IModuleManager&gt;();
List&lt;AssemblyFileName&gt; modules = GetModuleList(XmlFileName.Create(&quot;modules.xml&quot;));
moduleMgr.RegisterModules(modules);</pre>
<p>Module registration is performed here:</p>
<pre>/// &lt;summary&gt;
/// Register modules specified in a list of assembly filenames.
/// &lt;/summary&gt;
public virtual void RegisterModules(
  List&lt;AssemblyFileName&gt; moduleFilenames, 
  OptionalPath optionalPath = null, 
  Func&lt;string, Assembly&gt; assemblyResolver = null)
{
  List&lt;Assembly&gt; modules = LoadModules(moduleFilenames, optionalPath, assemblyResolver);
  List&lt;IModule&gt; registrants = InstantiateRegistrants(modules);
  InitializeRegistrants(registrants);
}</pre>
<h4>OptionalFolder Parameter</h4>
<p>The idea here is to allow the application to specify a sub-folder in which 
modules (dll's) are located.&nbsp; This helps to create a cleaner separation of 
module assemblies from other, &quot;statically linked&quot; dependencies.</p>
<h4>AssemblyResolver Parameter</h4>
<p>This is an interesting optional parameter.&nbsp; It is a function that takes 
the module name and returns the <code>Assembly</code>.&nbsp; The idea here is 
that the assembly may be located in a strange place, such as a resource file of 
the application.&nbsp; I haven't written about this technique, but when I do, 
I'll come back here and provide a link to that concept.&nbsp; In general though, 
you can use this optional function to attempt to resolve an assembly located 
somewhere other than a sub-folder of the application.</p>
<h3>Loading the Modules</h3>
<p>The method LoadModules iterates through the list of modules:</p>
<pre>/// &lt;summary&gt;
/// Load the assemblies and return the list of loaded assemblies. In order to register
/// services that the module implements, we have to load the assembly.
/// &lt;/summary&gt;
protected virtual List&lt;Assembly&gt; LoadModules(List&lt;AssemblyFileName&gt; moduleFilenames, OptionalPath optionalPath, Func&lt;string, Assembly&gt; assemblyResolver)
{
  List&lt;Assembly&gt; modules = new List&lt;Assembly&gt;();

  moduleFilenames.ForEach(a =&gt;
  {
    Assembly assembly = LoadAssembly(a, optionalPath, assemblyResolver);
    modules.Add(assembly);
  });

  return modules;
}</pre>
<p>This returns a list of <code>Assembly</code> instances.</p>
<p>LoadAssembly attempts to actually load the assembly, optionally passing the 
&quot;I need this assembly&quot; over to the assembly resolver function that you provided 
in the registration call.</p>
<pre>/// &lt;summary&gt;
/// Load and return an assembly given the assembly filename so we can proceed with
/// instantiating the module and so the module can register its services.
/// &lt;/summary&gt;
protected virtual Assembly LoadAssembly(
  AssemblyFileName assyName, 
  OptionalPath optionalPath, 
  Func&lt;string, Assembly&gt; assemblyResolver)
{
  FullPath fullPath = GetFullPath(assyName, optionalPath);
  Assembly assembly = null;

  if (!File.Exists(fullPath.Value))
  {
    Assert.Not(assemblyResolver == null, &quot;AssemblyResolver must be defined when attempting to load modules from the application's resources.&quot;);
    assembly = assemblyResolver(assyName.Value);
  }
  else
  {
    try
    {
      assembly = Assembly.LoadFile(fullPath.Value);
    }
    catch (Exception ex)
    {
      throw new ModuleManagerException(&quot;Unable to load module &quot; + assyName.Value + &quot;: &quot; + ex.Message);
    }
  }

  return assembly;
}</pre>
<p>The optional path is appended to the executing assembly location in the GetFullPath method:</p>
<pre>/// &lt;summary&gt;
/// Return the full path of the executing application (here we assume that ModuleManager.dll is in that path) and concatenate the assembly name of the module.
/// .NET requires the the full path in order to load the associated assembly.
/// &lt;/summary&gt;
protected virtual FullPath GetFullPath(AssemblyFileName assemblyName, OptionalPath optionalPath)
{
  string appLocation;
  string assyLocation = Assembly.GetExecutingAssembly().Location;

  if (assyLocation == &quot;&quot;)
  {
    Assert.Not(optionalFolder == null, &quot;Assemblies embedded as resources require that the optionalPath parameter specify the path to resolve assemblies.&quot;);
    appLocation = optionalPath.Value; // Must be specified! Here the optional path is the full path.  This gives two different meanings to how optional path is used!
  }
  else
  {
    appLocation = Path.GetDirectoryName(assyLocation);
    appLocation = Path.GetDirectoryName(assyLocation);

    if (optionalPath != null)
    {
      appLocation = Path.Combine(appLocation, optionalPath.Value);
    }
  }

  string fullPath = Path.Combine(appLocation, assemblyName.Value);

  return FullPath.Create(fullPath);
}</pre>
<p>Unfortunately, in the above code, there is a dual use of the optional path.&nbsp; 
There is a nuance of loading assemblies when the Module Manager is itself an 
embedded resources assembly -- the executing path in this case is an empty 
string, because the assembly, loaded by .NET assembly through a separately 
implemented assembly resolver (not discussed here), isn't associated with the 
executing assembly!&nbsp; This is very odd behavior and this whole situation 
should be ignored until I write the article on embedding assemblies as 
resources.&nbsp; In this case, the optional path is the <i>full path</i> to 
resolves the assembly location.&nbsp; Quite honestly, this whole issue requires 
a refactoring of how assemblies embedded as resources should be handled.</p>
<h3>Instantiating Registrants</h3>
<p>Once the assemblies have been loaded, the Module Manager instantiates the 
registrants.&nbsp; A &quot;registrant&quot; is a special class (one and only one such 
class) in each module that has implements the method in the interface <code>IModule</code>.&nbsp; 
In other words, our modules &quot;know&quot; that they are modules and can do some special 
things because they are modules.&nbsp; What those special things are is 
essentially up to you.&nbsp; In my library, the module is initialized with a 
Service Manager so that the module can register the services that it provides.&nbsp; 
That is described in the next article in this series.&nbsp; For now, we just 
need to know that the each module must provide a class that implements <code>IModule</code>.</p>
<pre>/// &lt;summary&gt;
/// Instantiate and return the list of registratants -- assemblies with classes that implement IModule.
/// The registrants is one and only one class in the module that implements IModule, which we can then
/// use to call the Initialize method so the module can register its services.
/// &lt;/summary&gt;
protected virtual List&lt;IModule&gt; InstantiateRegistrants(List&lt;Assembly&gt; modules)
{
  registrants = new List&lt;IModule&gt;();
  modules.ForEach(m =&gt;
  {
    IModule registrant = InstantiateRegistrant(m);
    registrants.Add(registrant);
  });

  return registrants;
}

/// &lt;summary&gt;
/// Instantiate a registrant. A registrant must have one and only one class that implements IModule.
/// The registrant is one and only one class in the module that implements IModule, which we can then
/// use to call the Initialize method so the module can register its services.
/// &lt;/summary&gt;
protected virtual IModule InstantiateRegistrant(Assembly module)
{
  var classesImplementingInterface = module.GetTypes().
    Where(t =&gt; t.IsClass).
    Where(c =&gt; c.GetInterfaces().Where(i =&gt; i.Name == &quot;IModule&quot;).Count() &gt; 0);

  Assert.That(classesImplementingInterface.Count() &lt;= 1, &quot;Module can only have one class that implements IModule&quot;);
  Assert.That(classesImplementingInterface.Count() != 0, &quot;Module does not have any classes that implement IModule&quot;);

  Type implementor = classesImplementingInterface.Single();
  IModule instance = Activator.CreateInstance(implementor) as IModule;

  return instance;
}</pre>
<h3>Initializing Registrants</h3>
<p>Each registrant in the module, once instantiated, can be initialized.&nbsp; 
The initialization method is a virtual stub in the ModuleManager class:</p>
<pre>/// &lt;summary&gt;
/// Initialize each registrant. This method should be overridden by your application needs.
/// &lt;/summary&gt;
protected virtual void InitializeRegistrants(List&lt;IModule&gt; registrants)
{
}</pre>
<p>If your modules need initialization, you would derive from ModuleManager and 
implement the specific initialization you require.</p>
<h2>Example Program</h2>
<p>Our demo solution consists of these four projects:</p>
<p>
<img border="0" src="demoSolution.png" width="289" height="105"></p>
<ol>
	<li>CommonInterface - This holds the IModule definition</li>
	<li>ModuleConsoleSpeak - Emits a message to the console</li>
	<li>ModuleManager - A console demo of the module manager</li>
	<li>ModuleVoiceSpeak - Speaks the message using .NET's voice synthesizer</li>
</ol>
<p>The example program implements two &quot;speakers&quot;, one that emits a console 
message, the other that speaks the message with .NET's speech synthesizer.&nbsp; 
The application is quite simple:</p>
<pre>static void Main(string[] args)
{
  IModuleManager mgr = new ModuleManager();
  List&lt;AssemblyFileName&gt; moduleNames = GetModuleList(XmlFileName.Create(&quot;modules.xml&quot;));
  mgr.RegisterModules(moduleNames, OptionalPath.Create(&quot;dll&quot;));

  // The one and only module that is being loaded.
  IModule module = mgr.Modules[0];
  module.Say(&quot;Hello World.&quot;);
}</pre>
<p>Note how the application is loading the modules from the &quot;dll&quot; sub-folder:</p>
<p><img border="0" src="dll.png" width="263" height="217"></p>
<p>The &quot;dll&quot; folder contains the assemblies for the two modules:</p>
<p><img border="0" src="dll2.png" width="198" height="58"></p>
<p>Also note that a post-build step copies the module into the &quot;dll&quot; folder:</p>
<pre>copy ModuleConsoleSpeak.dll ..\..\..\ModuleManager\bin\Debug\dll</pre>
<pre>copy ModuleVoiceSpeak.dll ..\..\..\ModuleManager\bin\Debug\dll</pre>
<p>Now, by changing the modules.xml file, the application responds by emitting the 
text to the console window or by speaking it.&nbsp; To speak the text, use this:</p>
<pre>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;Modules&gt;
  &lt;Module AssemblyName='ModuleVoiceSpeak.dll'/&gt;
&lt;/Modules&gt;</pre>
<p>To emit the text on the console window, use this:</p>
<pre>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;
&lt;Modules&gt;
  &lt;Module AssemblyName='ModuleConsoleSpeak.dll'/&gt;
&lt;/Modules&gt;</pre>
<h3>The Application Does Not Reference the Modules</h3>
<p>Note that in the demo application (called &quot;ModuleManager&quot;, a bad name!), 
there is no reference to the modules we're loading:</p>
<p><img border="0" src="refs1.png" width="273" height="219"></p>
<h3>IModule</h3>
<p><img border="0" src="../ServiceManager/important.png" width="38" height="32"> 
This implementation is for demonstration purposes only!</p>
<pre>namespace Clifton.Core.ModuleManagement
{
  public interface IModule
  {
    void Say(string text);
  }
}</pre>
<p>Here we see the problem I talked about earlier with runtime modular applications -- the common 
interface must exist in a separate assembly!&nbsp; If you're not careful, this 
can and will cause and explosion of assemblies that simply define interfaces and 
other shared types.&nbsp; We'll talk about this further in other articles.</p>
<p>The <i>actual</i> implementation of IModule is tied in with the Service Manager (the 
next article):</p>
<pre>namespace Clifton.Core.ModuleManagement
{
  public interface IModule
  {
    void InitializeServices(IServiceManager serviceManager);
  }
}</pre>
<h3>ModuleConsoleSpeak</h3>
<pre>using System;

using Clifton.Core.ModuleManagement;

namespace ModuleConsoleSpeak
{
  public class Speak : IModule
  {
    public void Say(string text)
    {
      Console.WriteLine(text);
    }
  }
}</pre>
<h3>ModuleVoiceSpeak</h3>
<pre>using System.Speech.Synthesis;

using Clifton.Core.ModuleManagement;

namespace ModuleVoiceSpeak
{
  public class Speak : IModule
  {
    public void Say(string text)
    {
      SpeechSynthesizer synth = new SpeechSynthesizer();
      synth.SetOutputToDefaultAudioDevice();
      synth.Speak(text);
    }
  }
}</pre>
<h3>A Word About the <code>IModule</code> Interface</h3>
<p>This a demonstration only!&nbsp; Placing module-specific requirements into 
<code>IModule</code> is <b>not</b> recommended.&nbsp; Modules are intended to implement a 
wide variety of things, and you can't and shouldn't describe those 
implementations in the <code>IModule</code> interface.&nbsp; I am doing so here 
only because it's simple to demonstrate just the Module Manager, knowing that 
the two modules I've implemented are very limited and have common behavior.&nbsp; 
In any real application, I would never do this, which is why the next article is 
about the Service Manager.</p>
<h2>Conclusion</h2>
<p>The demo illustrates the purpose of the Module Manager -- to be able to 
change the application's behavior:</p>
<ol>
	<li>Without recompiling the application.</li>
	<li>Through a configuration file.</li>
</ol>
<p>That's all I intended to do with this article, as the Module Manager is the 
core component of The Clifton Method.</p>
<h3>A Word About Modules vs. Dependency Injection</h3>
<p>Another way to go about this while issue is with dependency injection -- 
using reflection and type information, instantiate an object that implements a 
particular interface and assign it the a property of that interface type.&nbsp; 
Personally, I find DI to be overly complicated (you might say the same of what 
I'm doing here!) and the DI frameworks that I've seen are bloated, slow, and it 
becomes difficult to debug the application.&nbsp; </p>
<p>Besides, I use the Module Manager in a specific way -- to load assemblies 
that implement services.&nbsp; The registration process is simple to understand, 
simple to walk through with a debugger, and the entire implementation is very 
few lines of code, which makes it easier to maintain.</p>

<h3>Other Features</h3>
<h4>Deferred Loading</h4>
<p>At the time of this writing, the Module Manager loads all modules immediately 
-- there is no concept of deferred loading.&nbsp; This might be useful to 
implement in the future -- an &quot;on demand&quot; loading of modules, but there are 
certain complexities, in that the Service Manager (which is the next article) 
would need to know what module to load for a particular implementation.&nbsp; 
I've not really encountered a requirement for this kind of behavior, so there's 
really no reason to implement it, yet.</p>
<h4>Unloading Modules</h4>
<p>Similarly, the idea of being able to unload a module at runtime is attractive 
in that you could potentially replace a module without bringing down the 
application.&nbsp; However, as I've written about regarding
<a href="http://www.codeproject.com/Articles/1091726/The-Nuances-of-Loading-and-Unloading-Assemblies-wi">
Application Domains</a>, the performance and potential problems with event 
wire-ups makes this feature somewhat undesirable.</p>
<p>&nbsp;</p>

</body>

</html>